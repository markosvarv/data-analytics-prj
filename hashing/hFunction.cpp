#include "hFunction.h"
#include "dVector.h"
#include <iostream>
#include <random>

#include <bitset>

using namespace std;

hFunction::hFunction(unsigned long vector_size, default_random_engine& generator) {
    normal_distribution<double> distribution(0,1.0);

    for (unsigned int i=0; i<vector_size; ++i) {
        double number = distribution(generator);
        v.push_back(number);
    }

    random_device rd;  //Will be used to obtain a seed for the random number engine
    mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    uniform_real_distribution<> dis(0, w);
    //Use dis to transform the random unsigned int generated by gen into a double in [1, 2)
    t = dis(gen);
}

double hFunction::hValue (const vector<double>& p, int metric) {
    switch (metric) {
        case EUCLIDEAN:
            return floor((inner_product(p.begin(), p.end(), v.begin(), 0.0)+t)/w);
        case COSINE:
            return ((inner_product(p.begin(), p.end(), v.begin(), 0.0)>=0.0) ? 1.0 : 0.0);
        default:
            return -1.0;
    }
}

vector<hFunction> hFunction::init_hFunctions (unsigned long vector_size, int k, default_random_engine& generator){
    //we need k different h functions
    vector<hFunction> h;
    h.reserve(k);
    for (int i=0; i<k; i++)
        h.emplace_back(hFunction(vector_size, generator));

    return h;
}